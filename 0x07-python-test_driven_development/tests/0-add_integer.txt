
How to Use 0-add_integer.py


>>> add_integer = __import__('0-add_integer').add_integer

Numbers


"add_integer()" returns the addition of its arguments.  For numbers,
that value is equivalent to using the "+" operator. It also works with
floating-point values, but will convert them to integers.

::

    >>> add_integer(2, 3)
    5

    >>> add_integer(2.0, 3)
    5

    >>> add_integer(2)
    100

    >>> add_integer(2, -3.0)
    -1

    >>> add_integer(0)
    98

    >>> add_integer(9223372036854775806.0, 9223372036854775806.0)
    18446744073709551616


Non-Numbers
===========

"add_integer()" is only intended to work with numbers. In the case of any other
variable type, it will raise a ValueError.

::

    >>> add_integer('c', 3)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(2, "Hello")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer
