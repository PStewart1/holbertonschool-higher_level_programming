7-base_geometry

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

::
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 1)

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 0)
    Traceback (most recent call last):
        ...
    ValueError: my_int must be greater than 0

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("number", "0")
    Traceback (most recent call last):
        ...
    TypeError: number must be an integer

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("number")
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("number", None)
    Traceback (most recent call last):
        ...
    TypeError: number must be an integer

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("number", (4,))
    Traceback (most recent call last):
        ...
    TypeError: number must be an integer

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("number", [3])
    Traceback (most recent call last):
        ...
    TypeError: number must be an integer

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("number", True)
    Traceback (most recent call last):
        ...
    TypeError: number must be an integer

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("number", {3, 4})
    Traceback (most recent call last):
        ...
    TypeError: number must be an integer
